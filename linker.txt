Currently, the assembler doesn't support passes that would alter label locations.
Examples of this would be the LI, CALL, and TAIL pseudo-insts (grow) or compressed inst swaps (shrink).

There is currently a chicken and the egg problem:
labels depend on inst sizes
immediates depend on labels
inst sizes depend on immediates

labels -> sizes
    could this be deferred? just keep label items in the list til later?

imms   -> labels
    this could be split into vars / refs (separate namespaces)

sizes  -> imms
    this is unlikely to change

How can this be avoided?
How do traditional assemblers / linkers solve this?

Links:
https://github.com/riscv/riscv-gnu-toolchain/issues/703
https://www.sifive.com/blog/all-aboard-part-3-linker-relaxation-in-riscv-toolchain

Idea (split refs and vars, assume the worst (8 bytes per LI/CALL/TAIL), no growing):
    No nesting of Arith under Position / Offset?
    Can't assign a label ref to a var?

resolve constants (vars)
resolve regs
resolve labels
for each potential xform:
    eval imms using current label refs
    if eligible, make the swap (first come, first serve)
        if shrink (8 -> 4 or 4 -> 2), sub from all subsequent refs
resolve imms (using vars OR updated refs)
...

test 1
------

# loc = 0
foo:
    li t0 bar  # 4 or 8 bytes (expand to 2 insts)

# loc = 4 or 8
bar:
    j foo        # offset = 4 or 8


test 2
------

# loc = 0
foo:
    addi t0 t0 bar  # 4 or 2 bytes (compress to c.addi)

# loc = 4 or 2
bar:
    j foo         # offset = 4 or 2


test 3
------

# loc = 0
foo:
    jal x0 bar  # 4 or 2 bytes (compress to c.j)
    jal x0 bar  # 4 or 2 bytes (compress to c.j)
    jal x0 bar  # 4 or 2 bytes (compress to c.j)

# loc = 6 or 12
bar:
    j foo


Label('foo')  # loc = 0
  JTypeInst('jal', 'x0', Arithmetic('bar'))
  JTypeInst('jal', 'x0', Arithmetic('bar'))
  JTypeInst('jal', 'x0', Arithmetic('bar'))

Label('bar')  # loc = 6 (min) to 12 (max)
  JTypeInst('jal', 'x0', Arithmetic('foo'))

# can the jal(s) be compressed?
# well, where is 'bar'? somewhere between 6 and 12.
