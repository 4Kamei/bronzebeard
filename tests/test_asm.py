from ctypes import c_int32
import struct

import pytest

from bronzebeard import asm


@pytest.mark.parametrize(
    'value,      bits, expected', [
    # full-size extension simply applies two's complement
    (0b00000000, 8,    0),
    (0b01111111, 8,    127),
    (0b11111111, 8,    -1),
    (0b10000000, 8,    -128),
    (0b00000110, 8,    6),
    (0b00000110, 4,    6),
    (0b00000110, 3,    -2),
    (0x00000000, 32,   0),
    (0xffffffff, 32,   -1),
    (0x00000fff, 12,   -1),
])
def test_sign_extend(value, bits, expected):
    assert asm.sign_extend(value, bits) == expected


@pytest.mark.parametrize(
    'value,      expected', [
    (0x00000000, 0),
    (0x00001000, 1),
    (0x7ffff000, 0x7ffff),
    (0xfffff000, -1),
    (0x80000000, -0x80000),
    # MSB of lower portion being 1 should affect result
    (0x00000800, 1),
    (0x00001800, 2),
    (0x7ffff800, -0x80000),
    (0xfffff800, 0),
    (0x80000800, -0x7ffff),
])
def test_relocate_hi(value, expected):
    assert asm.relocate_hi(value) == expected


@pytest.mark.parametrize(
    'value,      expected', [
    (0x00000000, 0),
    (0x00000001, 1),
    (0x000007ff, 2047),
    (0x00000fff, -1),
    (0x00000800, -2048),
    # upper 20 bits should have no affect
    (0xfffff000, 0),
    (0xfffff001, 1),
    (0xfffff7ff, 2047),
    (0xffffffff, -1),
    (0xfffff800, -2048),
])
def test_relocate_lo(value, expected):
    assert asm.relocate_lo(value) == expected


@pytest.mark.parametrize(
    'value', [
    (0x00000000),
    (0x00000001),
    (0x000007ff),
    (0x00000fff),
    (0x00000800),
    (0xfffff000),
    (0xfffff7ff),
    (0xfffff800),
    (0xffffffff),
    (0x7fffffff),
    (0x02000000),
    (0x02000004),
    (0xdeadbeef),
    (0x12345678),
    (0xcafec0fe),
])
def test_relocate_hi_lo_sum(value):
    hi = asm.relocate_hi(value)
    lo = asm.relocate_lo(value)
    expected = asm.sign_extend(value, 32)

    sum_raw = (hi << 12) + lo
    sum_wrapped = c_int32(sum_raw).value
    assert sum_wrapped == expected


@pytest.mark.parametrize(
    'rd, imm,      code', [
    (0,  0,        0b00000000000000000000000000110111),
    (31, 0,        0b00000000000000000000111110110111),
    (0,  1,        0b00000000000000000001000000110111),
    (0,  0x7ffff,  0b01111111111111111111000000110111),
    (0,  -1,       0b11111111111111111111000000110111),
    (0,  -0x80000, 0b10000000000000000000000000110111),
])
def test_lui(rd, imm, code):
    assert asm.LUI(rd, imm) == code


@pytest.mark.parametrize(
    'rd, imm,      code', [
    (0,  0,        0b00000000000000000000000000010111),
    (31, 0,        0b00000000000000000000111110010111),
    (0,  1,        0b00000000000000000001000000010111),
    (0,  0x7ffff,  0b01111111111111111111000000010111),
    (0,  -1,       0b11111111111111111111000000010111),
    (0,  -0x80000, 0b10000000000000000000000000010111),
])
def test_auipc(rd, imm, code):
    assert asm.AUIPC(rd, imm) == code


@pytest.mark.parametrize(
    'rd, imm,       code', [
    (0,  0,         0b00000000000000000000000001101111),
    (31, 0,         0b00000000000000000000111111101111),
    (0,  2,         0b00000000001000000000000001101111),
    (0,  2046,      0b01111111111000000000000001101111),
    (0,  2048,      0b00000000000100000000000001101111),
    (0,  0x0ff000,  0b00000000000011111111000001101111),
    (0,  0x0ffffe,  0b01111111111111111111000001101111),
    (0,  -2,        0b11111111111111111111000001101111),
    (0,  -0x1000,   0b10000000000011111111000001101111),
    (0,  -0xff800,  0b10000000000100000000000001101111),
    (0,  -0xff802,  0b11111111111000000000000001101111),
    (0,  -0x100000, 0b10000000000000000000000001101111),
])
def test_jal(rd, imm, code):
    assert asm.JAL(rd, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000000000001100111),
    (31, 0,   0,      0b00000000000000000000111111100111),
    (0,  31,  0,      0b00000000000011111000000001100111),
    (31, 31,  0,      0b00000000000011111000111111100111),
    (0,  0,   2,      0b00000000001000000000000001100111),
    (0,  0,   0x7fe,  0b01111111111000000000000001100111),
    (0,  0,   -2,     0b11111111111000000000000001100111),
    (0,  0,   -0x800, 0b10000000000000000000000001100111),
])
def test_jalr(rd, rs1, imm, code):
    assert asm.JALR(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rs1, rs2, imm,     code', [
    (0,   0,   0,       0b00000000000000000000000001100011),
    (31,  0,   0,       0b00000000000011111000000001100011),
    (0,   31,  0,       0b00000001111100000000000001100011),
    (31,  31,  0,       0b00000001111111111000000001100011),
    (0,   0,   2,       0b00000000000000000000000101100011),
    (0,   0,   0xffe,   0b01111110000000000000111111100011),
    (0,   0,   -2,      0b11111110000000000000111111100011),
    (0,   0,   -0x1000, 0b10000000000000000000000001100011),
])
def test_beq(rs1, rs2, imm, code):
    assert asm.BEQ(rs1, rs2, imm) == code


@pytest.mark.parametrize(
    'rs1, rs2, imm,     code', [
    (0,   0,   0,       0b00000000000000000001000001100011),
    (31,  0,   0,       0b00000000000011111001000001100011),
    (0,   31,  0,       0b00000001111100000001000001100011),
    (31,  31,  0,       0b00000001111111111001000001100011),
    (0,   0,   2,       0b00000000000000000001000101100011),
    (0,   0,   0xffe,   0b01111110000000000001111111100011),
    (0,   0,   -2,      0b11111110000000000001111111100011),
    (0,   0,   -0x1000, 0b10000000000000000001000001100011),
])
def test_bne(rs1, rs2, imm, code):
    assert asm.BNE(rs1, rs2, imm) == code


@pytest.mark.parametrize(
    'rs1, rs2, imm,     code', [
    (0,   0,   0,       0b00000000000000000100000001100011),
    (31,  0,   0,       0b00000000000011111100000001100011),
    (0,   31,  0,       0b00000001111100000100000001100011),
    (31,  31,  0,       0b00000001111111111100000001100011),
    (0,   0,   2,       0b00000000000000000100000101100011),
    (0,   0,   0xffe,   0b01111110000000000100111111100011),
    (0,   0,   -2,      0b11111110000000000100111111100011),
    (0,   0,   -0x1000, 0b10000000000000000100000001100011),
])
def test_blt(rs1, rs2, imm, code):
    assert asm.BLT(rs1, rs2, imm) == code


@pytest.mark.parametrize(
    'rs1, rs2, imm,     code', [
    (0,   0,   0,       0b00000000000000000101000001100011),
    (31,  0,   0,       0b00000000000011111101000001100011),
    (0,   31,  0,       0b00000001111100000101000001100011),
    (31,  31,  0,       0b00000001111111111101000001100011),
    (0,   0,   2,       0b00000000000000000101000101100011),
    (0,   0,   0xffe,   0b01111110000000000101111111100011),
    (0,   0,   -2,      0b11111110000000000101111111100011),
    (0,   0,   -0x1000, 0b10000000000000000101000001100011),
])
def test_bge(rs1, rs2, imm, code):
    assert asm.BGE(rs1, rs2, imm) == code


@pytest.mark.parametrize(
    'rs1, rs2, imm,     code', [
    (0,   0,   0,       0b00000000000000000110000001100011),
    (31,  0,   0,       0b00000000000011111110000001100011),
    (0,   31,  0,       0b00000001111100000110000001100011),
    (31,  31,  0,       0b00000001111111111110000001100011),
    (0,   0,   2,       0b00000000000000000110000101100011),
    (0,   0,   0xffe,   0b01111110000000000110111111100011),
    (0,   0,   -2,      0b11111110000000000110111111100011),
    (0,   0,   -0x1000, 0b10000000000000000110000001100011),
])
def test_bltu(rs1, rs2, imm, code):
    assert asm.BLTU(rs1, rs2, imm) == code


@pytest.mark.parametrize(
    'rs1, rs2, imm,     code', [
    (0,   0,   0,       0b00000000000000000111000001100011),
    (31,  0,   0,       0b00000000000011111111000001100011),
    (0,   31,  0,       0b00000001111100000111000001100011),
    (31,  31,  0,       0b00000001111111111111000001100011),
    (0,   0,   2,       0b00000000000000000111000101100011),
    (0,   0,   0xffe,   0b01111110000000000111111111100011),
    (0,   0,   -2,      0b11111110000000000111111111100011),
    (0,   0,   -0x1000, 0b10000000000000000111000001100011),
])
def test_bgeu(rs1, rs2, imm, code):
    assert asm.BGEU(rs1, rs2, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000000000000000011),
    (31, 0,   0,      0b00000000000000000000111110000011),
    (0,  31,  0,      0b00000000000011111000000000000011),
    (31, 31,  0,      0b00000000000011111000111110000011),
    (0,  0,   1,      0b00000000000100000000000000000011),
    (0,  0,   0x7ff,  0b01111111111100000000000000000011),
    (0,  0,   -1,     0b11111111111100000000000000000011),
    (0,  0,   -0x800, 0b10000000000000000000000000000011),
])
def test_lb(rd, rs1, imm, code):
    assert asm.LB(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000001000000000011),
    (31, 0,   0,      0b00000000000000000001111110000011),
    (0,  31,  0,      0b00000000000011111001000000000011),
    (31, 31,  0,      0b00000000000011111001111110000011),
    (0,  0,   1,      0b00000000000100000001000000000011),
    (0,  0,   0x7ff,  0b01111111111100000001000000000011),
    (0,  0,   -1,     0b11111111111100000001000000000011),
    (0,  0,   -0x800, 0b10000000000000000001000000000011),
])
def test_lh(rd, rs1, imm, code):
    assert asm.LH(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000010000000000011),
    (31, 0,   0,      0b00000000000000000010111110000011),
    (0,  31,  0,      0b00000000000011111010000000000011),
    (31, 31,  0,      0b00000000000011111010111110000011),
    (0,  0,   1,      0b00000000000100000010000000000011),
    (0,  0,   0x7ff,  0b01111111111100000010000000000011),
    (0,  0,   -1,     0b11111111111100000010000000000011),
    (0,  0,   -0x800, 0b10000000000000000010000000000011),
])
def test_lw(rd, rs1, imm, code):
    assert asm.LW(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000100000000000011),
    (31, 0,   0,      0b00000000000000000100111110000011),
    (0,  31,  0,      0b00000000000011111100000000000011),
    (31, 31,  0,      0b00000000000011111100111110000011),
    (0,  0,   1,      0b00000000000100000100000000000011),
    (0,  0,   0x7ff,  0b01111111111100000100000000000011),
    (0,  0,   -1,     0b11111111111100000100000000000011),
    (0,  0,   -0x800, 0b10000000000000000100000000000011),
])
def test_lbu(rd, rs1, imm, code):
    assert asm.LBU(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000101000000000011),
    (31, 0,   0,      0b00000000000000000101111110000011),
    (0,  31,  0,      0b00000000000011111101000000000011),
    (31, 31,  0,      0b00000000000011111101111110000011),
    (0,  0,   1,      0b00000000000100000101000000000011),
    (0,  0,   0x7ff,  0b01111111111100000101000000000011),
    (0,  0,   -1,     0b11111111111100000101000000000011),
    (0,  0,   -0x800, 0b10000000000000000101000000000011),
])
def test_lhu(rd, rs1, imm, code):
    assert asm.LHU(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rs1, rs2, imm,   code', [
    (0,   0,   0,     0b00000000000000000000000000100011),
    (31,  0,   0,     0b00000000000011111000000000100011),
    (0,   31,  0,     0b00000001111100000000000000100011),
    (31,  31,  0,     0b00000001111111111000000000100011),
    (0,   0,   1,     0b00000000000000000000000010100011),
    (0,   0,   2047,  0b01111110000000000000111110100011),
    (0,   0,   -1,    0b11111110000000000000111110100011),
    (0,   0,   -2048, 0b10000000000000000000000000100011),
])
def test_sb(rs1, rs2, imm, code):
    assert asm.SB(rs1, rs2, imm) == code


@pytest.mark.parametrize(
    'rs1, rs2, imm,   code', [
    (0,   0,   0,     0b00000000000000000001000000100011),
    (31,  0,   0,     0b00000000000011111001000000100011),
    (0,   31,  0,     0b00000001111100000001000000100011),
    (31,  31,  0,     0b00000001111111111001000000100011),
    (0,   0,   1,     0b00000000000000000001000010100011),
    (0,   0,   2047,  0b01111110000000000001111110100011),
    (0,   0,   -1,    0b11111110000000000001111110100011),
    (0,   0,   -2048, 0b10000000000000000001000000100011),
])
def test_sh(rs1, rs2, imm, code):
    assert asm.SH(rs1, rs2, imm) == code


@pytest.mark.parametrize(
    'rs1, rs2, imm,   code', [
    (0,   0,   0,     0b00000000000000000010000000100011),
    (31,  0,   0,     0b00000000000011111010000000100011),
    (0,   31,  0,     0b00000001111100000010000000100011),
    (31,  31,  0,     0b00000001111111111010000000100011),
    (0,   0,   1,     0b00000000000000000010000010100011),
    (0,   0,   2047,  0b01111110000000000010111110100011),
    (0,   0,   -1,    0b11111110000000000010111110100011),
    (0,   0,   -2048, 0b10000000000000000010000000100011),
])
def test_sw(rs1, rs2, imm, code):
    assert asm.SW(rs1, rs2, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000000000000010011),
    (31, 0,   0,      0b00000000000000000000111110010011),
    (0,  31,  0,      0b00000000000011111000000000010011),
    (31, 31,  0,      0b00000000000011111000111110010011),
    (0,  0,   1,      0b00000000000100000000000000010011),
    (0,  0,   0x7ff,  0b01111111111100000000000000010011),
    (0,  0,   -1,     0b11111111111100000000000000010011),
    (0,  0,   -0x800, 0b10000000000000000000000000010011),
])
def test_addi(rd, rs1, imm, code):
    assert asm.ADDI(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000010000000010011),
    (31, 0,   0,      0b00000000000000000010111110010011),
    (0,  31,  0,      0b00000000000011111010000000010011),
    (31, 31,  0,      0b00000000000011111010111110010011),
    (0,  0,   1,      0b00000000000100000010000000010011),
    (0,  0,   0x7ff,  0b01111111111100000010000000010011),
    (0,  0,   -1,     0b11111111111100000010000000010011),
    (0,  0,   -0x800, 0b10000000000000000010000000010011),
])
def test_slti(rd, rs1, imm, code):
    assert asm.SLTI(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000011000000010011),
    (31, 0,   0,      0b00000000000000000011111110010011),
    (0,  31,  0,      0b00000000000011111011000000010011),
    (31, 31,  0,      0b00000000000011111011111110010011),
    (0,  0,   1,      0b00000000000100000011000000010011),
    (0,  0,   0x7ff,  0b01111111111100000011000000010011),
    (0,  0,   -1,     0b11111111111100000011000000010011),
    (0,  0,   -0x800, 0b10000000000000000011000000010011),
])
def test_sltiu(rd, rs1, imm, code):
    assert asm.SLTIU(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000100000000010011),
    (31, 0,   0,      0b00000000000000000100111110010011),
    (0,  31,  0,      0b00000000000011111100000000010011),
    (31, 31,  0,      0b00000000000011111100111110010011),
    (0,  0,   1,      0b00000000000100000100000000010011),
    (0,  0,   0x7ff,  0b01111111111100000100000000010011),
    (0,  0,   -1,     0b11111111111100000100000000010011),
    (0,  0,   -0x800, 0b10000000000000000100000000010011),
])
def test_xori(rd, rs1, imm, code):
    assert asm.XORI(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000110000000010011),
    (31, 0,   0,      0b00000000000000000110111110010011),
    (0,  31,  0,      0b00000000000011111110000000010011),
    (31, 31,  0,      0b00000000000011111110111110010011),
    (0,  0,   1,      0b00000000000100000110000000010011),
    (0,  0,   0x7ff,  0b01111111111100000110000000010011),
    (0,  0,   -1,     0b11111111111100000110000000010011),
    (0,  0,   -0x800, 0b10000000000000000110000000010011),
])
def test_ori(rd, rs1, imm, code):
    assert asm.ORI(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm,    code', [
    (0,  0,   0,      0b00000000000000000111000000010011),
    (31, 0,   0,      0b00000000000000000111111110010011),
    (0,  31,  0,      0b00000000000011111111000000010011),
    (31, 31,  0,      0b00000000000011111111111110010011),
    (0,  0,   1,      0b00000000000100000111000000010011),
    (0,  0,   0x7ff,  0b01111111111100000111000000010011),
    (0,  0,   -1,     0b11111111111100000111000000010011),
    (0,  0,   -0x800, 0b10000000000000000111000000010011),
])
def test_andi(rd, rs1, imm, code):
    assert asm.ANDI(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000000000000000001000000010011),
    (31, 0,   0,   0b00000000000000000001111110010011),
    (0,  31,  0,   0b00000000000011111001000000010011),
    (31, 31,  0,   0b00000000000011111001111110010011),
    (0,  0,   31,  0b00000001111100000001000000010011),
    (31, 0,   31,  0b00000001111100000001111110010011),
    (0,  31,  31,  0b00000001111111111001000000010011),
    (31, 31,  31,  0b00000001111111111001111110010011),
])
def test_slli(rd, rs1, rs2, code):
    assert asm.SLLI(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000000000000000101000000010011),
    (31, 0,   0,   0b00000000000000000101111110010011),
    (0,  31,  0,   0b00000000000011111101000000010011),
    (31, 31,  0,   0b00000000000011111101111110010011),
    (0,  0,   31,  0b00000001111100000101000000010011),
    (31, 0,   31,  0b00000001111100000101111110010011),
    (0,  31,  31,  0b00000001111111111101000000010011),
    (31, 31,  31,  0b00000001111111111101111110010011),
])
def test_srli(rd, rs1, rs2, code):
    assert asm.SRLI(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b01000000000000000101000000010011),
    (31, 0,   0,   0b01000000000000000101111110010011),
    (0,  31,  0,   0b01000000000011111101000000010011),
    (31, 31,  0,   0b01000000000011111101111110010011),
    (0,  0,   31,  0b01000001111100000101000000010011),
    (31, 0,   31,  0b01000001111100000101111110010011),
    (0,  31,  31,  0b01000001111111111101000000010011),
    (31, 31,  31,  0b01000001111111111101111110010011),
])
def test_srai(rd, rs1, rs2, code):
    assert asm.SRAI(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000000000000000000000000110011),
    (31, 0,   0,   0b00000000000000000000111110110011),
    (0,  31,  0,   0b00000000000011111000000000110011),
    (31, 31,  0,   0b00000000000011111000111110110011),
    (0,  0,   31,  0b00000001111100000000000000110011),
    (31, 0,   31,  0b00000001111100000000111110110011),
    (0,  31,  31,  0b00000001111111111000000000110011),
    (31, 31,  31,  0b00000001111111111000111110110011),
])
def test_add(rd, rs1, rs2, code):
    assert asm.ADD(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b01000000000000000000000000110011),
    (31, 0,   0,   0b01000000000000000000111110110011),
    (0,  31,  0,   0b01000000000011111000000000110011),
    (31, 31,  0,   0b01000000000011111000111110110011),
    (0,  0,   31,  0b01000001111100000000000000110011),
    (31, 0,   31,  0b01000001111100000000111110110011),
    (0,  31,  31,  0b01000001111111111000000000110011),
    (31, 31,  31,  0b01000001111111111000111110110011),
])
def test_sub(rd, rs1, rs2, code):
    assert asm.SUB(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000000000000000001000000110011),
    (31, 0,   0,   0b00000000000000000001111110110011),
    (0,  31,  0,   0b00000000000011111001000000110011),
    (31, 31,  0,   0b00000000000011111001111110110011),
    (0,  0,   31,  0b00000001111100000001000000110011),
    (31, 0,   31,  0b00000001111100000001111110110011),
    (0,  31,  31,  0b00000001111111111001000000110011),
    (31, 31,  31,  0b00000001111111111001111110110011),
])
def test_sll(rd, rs1, rs2, code):
    assert asm.SLL(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000000000000000010000000110011),
    (31, 0,   0,   0b00000000000000000010111110110011),
    (0,  31,  0,   0b00000000000011111010000000110011),
    (31, 31,  0,   0b00000000000011111010111110110011),
    (0,  0,   31,  0b00000001111100000010000000110011),
    (31, 0,   31,  0b00000001111100000010111110110011),
    (0,  31,  31,  0b00000001111111111010000000110011),
    (31, 31,  31,  0b00000001111111111010111110110011),
])
def test_slt(rd, rs1, rs2, code):
    assert asm.SLT(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000000000000000011000000110011),
    (31, 0,   0,   0b00000000000000000011111110110011),
    (0,  31,  0,   0b00000000000011111011000000110011),
    (31, 31,  0,   0b00000000000011111011111110110011),
    (0,  0,   31,  0b00000001111100000011000000110011),
    (31, 0,   31,  0b00000001111100000011111110110011),
    (0,  31,  31,  0b00000001111111111011000000110011),
    (31, 31,  31,  0b00000001111111111011111110110011),
])
def test_sltu(rd, rs1, rs2, code):
    assert asm.SLTU(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000000000000000100000000110011),
    (31, 0,   0,   0b00000000000000000100111110110011),
    (0,  31,  0,   0b00000000000011111100000000110011),
    (31, 31,  0,   0b00000000000011111100111110110011),
    (0,  0,   31,  0b00000001111100000100000000110011),
    (31, 0,   31,  0b00000001111100000100111110110011),
    (0,  31,  31,  0b00000001111111111100000000110011),
    (31, 31,  31,  0b00000001111111111100111110110011),
])
def test_xor(rd, rs1, rs2, code):
    assert asm.XOR(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000000000000000101000000110011),
    (31, 0,   0,   0b00000000000000000101111110110011),
    (0,  31,  0,   0b00000000000011111101000000110011),
    (31, 31,  0,   0b00000000000011111101111110110011),
    (0,  0,   31,  0b00000001111100000101000000110011),
    (31, 0,   31,  0b00000001111100000101111110110011),
    (0,  31,  31,  0b00000001111111111101000000110011),
    (31, 31,  31,  0b00000001111111111101111110110011),
])
def test_srl(rd, rs1, rs2, code):
    assert asm.SRL(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b01000000000000000101000000110011),
    (31, 0,   0,   0b01000000000000000101111110110011),
    (0,  31,  0,   0b01000000000011111101000000110011),
    (31, 31,  0,   0b01000000000011111101111110110011),
    (0,  0,   31,  0b01000001111100000101000000110011),
    (31, 0,   31,  0b01000001111100000101111110110011),
    (0,  31,  31,  0b01000001111111111101000000110011),
    (31, 31,  31,  0b01000001111111111101111110110011),
])
def test_sra(rd, rs1, rs2, code):
    assert asm.SRA(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000000000000000110000000110011),
    (31, 0,   0,   0b00000000000000000110111110110011),
    (0,  31,  0,   0b00000000000011111110000000110011),
    (31, 31,  0,   0b00000000000011111110111110110011),
    (0,  0,   31,  0b00000001111100000110000000110011),
    (31, 0,   31,  0b00000001111100000110111110110011),
    (0,  31,  31,  0b00000001111111111110000000110011),
    (31, 31,  31,  0b00000001111111111110111110110011),
])
def test_or(rd, rs1, rs2, code):
    assert asm.OR(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000000000000000111000000110011),
    (31, 0,   0,   0b00000000000000000111111110110011),
    (0,  31,  0,   0b00000000000011111111000000110011),
    (31, 31,  0,   0b00000000000011111111111110110011),
    (0,  0,   31,  0b00000001111100000111000000110011),
    (31, 0,   31,  0b00000001111100000111111110110011),
    (0,  31,  31,  0b00000001111111111111000000110011),
    (31, 31,  31,  0b00000001111111111111111110110011),
])
def test_and(rd, rs1, rs2, code):
    assert asm.AND(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'succ,   pred,   code', [
    (0b0000, 0b0000, 0b00000000000000000000000000001111),
    (0b0000, 0b1111, 0b00001111000000000000000000001111),
    (0b1111, 0b0000, 0b00000000111100000000000000001111),
    (0b1111, 0b1111, 0b00001111111100000000000000001111),
])
def test_fence(succ, pred, code):
    assert asm.FENCE(succ, pred) == code


def test_ecall():
    assert asm.ECALL() == 0b00000000000000000000000001110011


def test_ebreak():
    assert asm.EBREAK() == 0b00000000000100000000000001110011


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000010000000000000000000110011),
    (31, 0,   0,   0b00000010000000000000111110110011),
    (0,  31,  0,   0b00000010000011111000000000110011),
    (31, 31,  0,   0b00000010000011111000111110110011),
    (0,  0,   31,  0b00000011111100000000000000110011),
    (31, 0,   31,  0b00000011111100000000111110110011),
    (0,  31,  31,  0b00000011111111111000000000110011),
    (31, 31,  31,  0b00000011111111111000111110110011),
])
def test_mul(rd, rs1, rs2, code):
    assert asm.MUL(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000010000000000001000000110011),
    (31, 0,   0,   0b00000010000000000001111110110011),
    (0,  31,  0,   0b00000010000011111001000000110011),
    (31, 31,  0,   0b00000010000011111001111110110011),
    (0,  0,   31,  0b00000011111100000001000000110011),
    (31, 0,   31,  0b00000011111100000001111110110011),
    (0,  31,  31,  0b00000011111111111001000000110011),
    (31, 31,  31,  0b00000011111111111001111110110011),
])
def test_mulh(rd, rs1, rs2, code):
    assert asm.MULH(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000010000000000010000000110011),
    (31, 0,   0,   0b00000010000000000010111110110011),
    (0,  31,  0,   0b00000010000011111010000000110011),
    (31, 31,  0,   0b00000010000011111010111110110011),
    (0,  0,   31,  0b00000011111100000010000000110011),
    (31, 0,   31,  0b00000011111100000010111110110011),
    (0,  31,  31,  0b00000011111111111010000000110011),
    (31, 31,  31,  0b00000011111111111010111110110011),
])
def test_mulhsu(rd, rs1, rs2, code):
    assert asm.MULHSU(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000010000000000011000000110011),
    (31, 0,   0,   0b00000010000000000011111110110011),
    (0,  31,  0,   0b00000010000011111011000000110011),
    (31, 31,  0,   0b00000010000011111011111110110011),
    (0,  0,   31,  0b00000011111100000011000000110011),
    (31, 0,   31,  0b00000011111100000011111110110011),
    (0,  31,  31,  0b00000011111111111011000000110011),
    (31, 31,  31,  0b00000011111111111011111110110011),
])
def test_mulhu(rd, rs1, rs2, code):
    assert asm.MULHU(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000010000000000100000000110011),
    (31, 0,   0,   0b00000010000000000100111110110011),
    (0,  31,  0,   0b00000010000011111100000000110011),
    (31, 31,  0,   0b00000010000011111100111110110011),
    (0,  0,   31,  0b00000011111100000100000000110011),
    (31, 0,   31,  0b00000011111100000100111110110011),
    (0,  31,  31,  0b00000011111111111100000000110011),
    (31, 31,  31,  0b00000011111111111100111110110011),
])
def test_div(rd, rs1, rs2, code):
    assert asm.DIV(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000010000000000101000000110011),
    (31, 0,   0,   0b00000010000000000101111110110011),
    (0,  31,  0,   0b00000010000011111101000000110011),
    (31, 31,  0,   0b00000010000011111101111110110011),
    (0,  0,   31,  0b00000011111100000101000000110011),
    (31, 0,   31,  0b00000011111100000101111110110011),
    (0,  31,  31,  0b00000011111111111101000000110011),
    (31, 31,  31,  0b00000011111111111101111110110011),
])
def test_divu(rd, rs1, rs2, code):
    assert asm.DIVU(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000010000000000110000000110011),
    (31, 0,   0,   0b00000010000000000110111110110011),
    (0,  31,  0,   0b00000010000011111110000000110011),
    (31, 31,  0,   0b00000010000011111110111110110011),
    (0,  0,   31,  0b00000011111100000110000000110011),
    (31, 0,   31,  0b00000011111100000110111110110011),
    (0,  31,  31,  0b00000011111111111110000000110011),
    (31, 31,  31,  0b00000011111111111110111110110011),
])
def test_rem(rd, rs1, rs2, code):
    assert asm.REM(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, code', [
    (0,  0,   0,   0b00000010000000000111000000110011),
    (31, 0,   0,   0b00000010000000000111111110110011),
    (0,  31,  0,   0b00000010000011111111000000110011),
    (31, 31,  0,   0b00000010000011111111111110110011),
    (0,  0,   31,  0b00000011111100000111000000110011),
    (31, 0,   31,  0b00000011111100000111111110110011),
    (0,  31,  31,  0b00000011111111111111000000110011),
    (31, 31,  31,  0b00000011111111111111111110110011),
])
def test_remu(rd, rs1, rs2, code):
    assert asm.REMU(rd, rs1, rs2) == code


@pytest.mark.parametrize(
    'rd, rs1, aq, rl, code', [
    (0,  0,   0,  0,  0b00010000000000000010000000101111),
    (0,  0,   1,  0,  0b00010100000000000010000000101111),
    (0,  0,   0,  1,  0b00010010000000000010000000101111),
    (0,  0,   1,  1,  0b00010110000000000010000000101111),
    (31, 0,   0,  0,  0b00010000000000000010111110101111),
    (0,  31,  0,  0,  0b00010000000011111010000000101111),
    (31, 31,  0,  0,  0b00010000000011111010111110101111),
    (0,  0,   0,  0,  0b00010000000000000010000000101111),
    (31, 0,   0,  0,  0b00010000000000000010111110101111),
    (0,  31,  0,  0,  0b00010000000011111010000000101111),
    (31, 31,  0,  0,  0b00010000000011111010111110101111),
])
def test_lr_w(rd, rs1, aq, rl, code):
    assert asm.LR_W(rd, rs1, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, aq, rl, code', [
    (0,  0,   0,   0,  0,  0b00011000000000000010000000101111),
    (0,  0,   0,   1,  0,  0b00011100000000000010000000101111),
    (0,  0,   0,   0,  1,  0b00011010000000000010000000101111),
    (0,  0,   0,   1,  1,  0b00011110000000000010000000101111),
    (31, 0,   0,   0,  0,  0b00011000000000000010111110101111),
    (0,  31,  0,   0,  0,  0b00011000000011111010000000101111),
    (31, 31,  0,   0,  0,  0b00011000000011111010111110101111),
    (0,  0,   31,  0,  0,  0b00011001111100000010000000101111),
    (31, 0,   31,  0,  0,  0b00011001111100000010111110101111),
    (0,  31,  31,  0,  0,  0b00011001111111111010000000101111),
    (31, 31,  31,  0,  0,  0b00011001111111111010111110101111),
])
def test_sc_w(rd, rs1, rs2, aq, rl, code):
    assert asm.SC_W(rd, rs1, rs2, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, aq, rl, code', [
    (0,  0,   0,   0,  0,  0b00001000000000000010000000101111),
    (0,  0,   0,   1,  0,  0b00001100000000000010000000101111),
    (0,  0,   0,   0,  1,  0b00001010000000000010000000101111),
    (0,  0,   0,   1,  1,  0b00001110000000000010000000101111),
    (31, 0,   0,   0,  0,  0b00001000000000000010111110101111),
    (0,  31,  0,   0,  0,  0b00001000000011111010000000101111),
    (31, 31,  0,   0,  0,  0b00001000000011111010111110101111),
    (0,  0,   31,  0,  0,  0b00001001111100000010000000101111),
    (31, 0,   31,  0,  0,  0b00001001111100000010111110101111),
    (0,  31,  31,  0,  0,  0b00001001111111111010000000101111),
    (31, 31,  31,  0,  0,  0b00001001111111111010111110101111),
])
def test_amoswap_w(rd, rs1, rs2, aq, rl, code):
    assert asm.AMOSWAP_W(rd, rs1, rs2, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, aq, rl, code', [
    (0,  0,   0,   0,  0,  0b00000000000000000010000000101111),
    (0,  0,   0,   1,  0,  0b00000100000000000010000000101111),
    (0,  0,   0,   0,  1,  0b00000010000000000010000000101111),
    (0,  0,   0,   1,  1,  0b00000110000000000010000000101111),
    (31, 0,   0,   0,  0,  0b00000000000000000010111110101111),
    (0,  31,  0,   0,  0,  0b00000000000011111010000000101111),
    (31, 31,  0,   0,  0,  0b00000000000011111010111110101111),
    (0,  0,   31,  0,  0,  0b00000001111100000010000000101111),
    (31, 0,   31,  0,  0,  0b00000001111100000010111110101111),
    (0,  31,  31,  0,  0,  0b00000001111111111010000000101111),
    (31, 31,  31,  0,  0,  0b00000001111111111010111110101111),
])
def test_amoadd_w(rd, rs1, rs2, aq, rl, code):
    assert asm.AMOADD_W(rd, rs1, rs2, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, aq, rl, code', [
    (0,  0,   0,   0,  0,  0b00100000000000000010000000101111),
    (0,  0,   0,   1,  0,  0b00100100000000000010000000101111),
    (0,  0,   0,   0,  1,  0b00100010000000000010000000101111),
    (0,  0,   0,   1,  1,  0b00100110000000000010000000101111),
    (31, 0,   0,   0,  0,  0b00100000000000000010111110101111),
    (0,  31,  0,   0,  0,  0b00100000000011111010000000101111),
    (31, 31,  0,   0,  0,  0b00100000000011111010111110101111),
    (0,  0,   31,  0,  0,  0b00100001111100000010000000101111),
    (31, 0,   31,  0,  0,  0b00100001111100000010111110101111),
    (0,  31,  31,  0,  0,  0b00100001111111111010000000101111),
    (31, 31,  31,  0,  0,  0b00100001111111111010111110101111),
])
def test_amoxor_w(rd, rs1, rs2, aq, rl, code):
    assert asm.AMOXOR_W(rd, rs1, rs2, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, aq, rl, code', [
    (0,  0,   0,   0,  0,  0b01100000000000000010000000101111),
    (0,  0,   0,   1,  0,  0b01100100000000000010000000101111),
    (0,  0,   0,   0,  1,  0b01100010000000000010000000101111),
    (0,  0,   0,   1,  1,  0b01100110000000000010000000101111),
    (31, 0,   0,   0,  0,  0b01100000000000000010111110101111),
    (0,  31,  0,   0,  0,  0b01100000000011111010000000101111),
    (31, 31,  0,   0,  0,  0b01100000000011111010111110101111),
    (0,  0,   31,  0,  0,  0b01100001111100000010000000101111),
    (31, 0,   31,  0,  0,  0b01100001111100000010111110101111),
    (0,  31,  31,  0,  0,  0b01100001111111111010000000101111),
    (31, 31,  31,  0,  0,  0b01100001111111111010111110101111),
])
def test_amoand_w(rd, rs1, rs2, aq, rl, code):
    assert asm.AMOAND_W(rd, rs1, rs2, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, aq, rl, code', [
    (0,  0,   0,   0,  0,  0b01000000000000000010000000101111),
    (0,  0,   0,   1,  0,  0b01000100000000000010000000101111),
    (0,  0,   0,   0,  1,  0b01000010000000000010000000101111),
    (0,  0,   0,   1,  1,  0b01000110000000000010000000101111),
    (31, 0,   0,   0,  0,  0b01000000000000000010111110101111),
    (0,  31,  0,   0,  0,  0b01000000000011111010000000101111),
    (31, 31,  0,   0,  0,  0b01000000000011111010111110101111),
    (0,  0,   31,  0,  0,  0b01000001111100000010000000101111),
    (31, 0,   31,  0,  0,  0b01000001111100000010111110101111),
    (0,  31,  31,  0,  0,  0b01000001111111111010000000101111),
    (31, 31,  31,  0,  0,  0b01000001111111111010111110101111),
])
def test_amoor_w(rd, rs1, rs2, aq, rl, code):
    assert asm.AMOOR_W(rd, rs1, rs2, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, aq, rl, code', [
    (0,  0,   0,   0,  0,  0b10000000000000000010000000101111),
    (0,  0,   0,   1,  0,  0b10000100000000000010000000101111),
    (0,  0,   0,   0,  1,  0b10000010000000000010000000101111),
    (0,  0,   0,   1,  1,  0b10000110000000000010000000101111),
    (31, 0,   0,   0,  0,  0b10000000000000000010111110101111),
    (0,  31,  0,   0,  0,  0b10000000000011111010000000101111),
    (31, 31,  0,   0,  0,  0b10000000000011111010111110101111),
    (0,  0,   31,  0,  0,  0b10000001111100000010000000101111),
    (31, 0,   31,  0,  0,  0b10000001111100000010111110101111),
    (0,  31,  31,  0,  0,  0b10000001111111111010000000101111),
    (31, 31,  31,  0,  0,  0b10000001111111111010111110101111),
])
def test_amomin_w(rd, rs1, rs2, aq, rl, code):
    assert asm.AMOMIN_W(rd, rs1, rs2, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, aq, rl, code', [
    (0,  0,   0,   0,  0,  0b10100000000000000010000000101111),
    (0,  0,   0,   1,  0,  0b10100100000000000010000000101111),
    (0,  0,   0,   0,  1,  0b10100010000000000010000000101111),
    (0,  0,   0,   1,  1,  0b10100110000000000010000000101111),
    (31, 0,   0,   0,  0,  0b10100000000000000010111110101111),
    (0,  31,  0,   0,  0,  0b10100000000011111010000000101111),
    (31, 31,  0,   0,  0,  0b10100000000011111010111110101111),
    (0,  0,   31,  0,  0,  0b10100001111100000010000000101111),
    (31, 0,   31,  0,  0,  0b10100001111100000010111110101111),
    (0,  31,  31,  0,  0,  0b10100001111111111010000000101111),
    (31, 31,  31,  0,  0,  0b10100001111111111010111110101111),
])
def test_amomax_w(rd, rs1, rs2, aq, rl, code):
    assert asm.AMOMAX_W(rd, rs1, rs2, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, aq, rl, code', [
    (0,  0,   0,   0,  0,  0b11000000000000000010000000101111),
    (0,  0,   0,   1,  0,  0b11000100000000000010000000101111),
    (0,  0,   0,   0,  1,  0b11000010000000000010000000101111),
    (0,  0,   0,   1,  1,  0b11000110000000000010000000101111),
    (31, 0,   0,   0,  0,  0b11000000000000000010111110101111),
    (0,  31,  0,   0,  0,  0b11000000000011111010000000101111),
    (31, 31,  0,   0,  0,  0b11000000000011111010111110101111),
    (0,  0,   31,  0,  0,  0b11000001111100000010000000101111),
    (31, 0,   31,  0,  0,  0b11000001111100000010111110101111),
    (0,  31,  31,  0,  0,  0b11000001111111111010000000101111),
    (31, 31,  31,  0,  0,  0b11000001111111111010111110101111),
])
def test_amominu_w(rd, rs1, rs2, aq, rl, code):
    assert asm.AMOMINU_W(rd, rs1, rs2, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, rs1, rs2, aq, rl, code', [
    (0,  0,   0,   0,  0,  0b11100000000000000010000000101111),
    (0,  0,   0,   1,  0,  0b11100100000000000010000000101111),
    (0,  0,   0,   0,  1,  0b11100010000000000010000000101111),
    (0,  0,   0,   1,  1,  0b11100110000000000010000000101111),
    (31, 0,   0,   0,  0,  0b11100000000000000010111110101111),
    (0,  31,  0,   0,  0,  0b11100000000011111010000000101111),
    (31, 31,  0,   0,  0,  0b11100000000011111010111110101111),
    (0,  0,   31,  0,  0,  0b11100001111100000010000000101111),
    (31, 0,   31,  0,  0,  0b11100001111100000010111110101111),
    (0,  31,  31,  0,  0,  0b11100001111111111010000000101111),
    (31, 31,  31,  0,  0,  0b11100001111111111010111110101111),
])
def test_amomaxu_w(rd, rs1, rs2, aq, rl, code):
    assert asm.AMOMAXU_W(rd, rs1, rs2, aq=aq, rl=rl) == code


@pytest.mark.parametrize(
    'rd, imm,     code', [
    (8,  4,      0b0000000001000000),
    (8,  1020,   0b0001111111100000),
    (15, 0x01*4, 0b0000000001011100),
    (15, 0xff*4, 0b0001111111111100),
    (8,  8,      0b0000000000100000),
    (8,  12,     0b0000000001100000),
])
def test_c_addi4spn(rd, imm, code):
    assert asm.C_ADDI4SPN(rd, imm) == code


@pytest.mark.parametrize(
    'rd, rs1, imm, code', [
    (8,  8,   0,   0b0100000000000000),
    (8,  8,   124, 0b0101110001100000),
    (8,  15,  0,   0b0100001110000000),
    (15, 8,   0,   0b0100000000011100),
    (15, 15,  124, 0b0101111111111100),
])
def test_c_lw(rd, rs1, imm, code):
    assert asm.C_LW(rd, rs1, imm) == code


@pytest.mark.parametrize(
    'rs1, rs2, imm, code', [
    (8,   8,   0,   0b1100000000000000),
    (8,   8,   124, 0b1101110001100000),
    (8,   15,  0,   0b1100000000011100),
    (15,  8,   0,   0b1100001110000000),
    (15,  15,  124, 0b1101111111111100),
])
def test_c_sw(rs1, rs2, imm, code):
    assert asm.C_SW(rs1, rs2, imm) == code


@pytest.mark.parametrize(
    'code', [
    0b0000000000000001,
])
def test_c_nop(code):
    assert asm.C_NOP() == code


@pytest.mark.parametrize(
    'rd_rs1, imm, code', [
    (1,      1,   0b0000000010000101),
    (1 ,     31,  0b0000000011111101),
    (1,      -1,  0b0001000011111101),
    (1,      -32, 0b0001000010000001),
    (31,     1,   0b0000111110000101),
    (31,     31,  0b0000111111111101),
    (31,     -1,  0b0001111111111101),
    (31,     -32, 0b0001111110000001),
])
def test_c_addi(rd_rs1, imm, code):
    assert asm.C_ADDI(rd_rs1, imm) == code


@pytest.mark.parametrize(
    'rd_rs1, imm, code', [
    (1,      1,   0b0100000010000101),
    (1 ,     31,  0b0100000011111101),
    (1,      -1,  0b0101000011111101),
    (1,      -32, 0b0101000010000001),
    (31,     1 ,  0b0100111110000101),
    (31,     31,  0b0100111111111101),
    (31,     -1,  0b0101111111111101),
    (31,     -32, 0b0101111110000001),
])
def test_c_li(rd_rs1, imm, code):
    assert asm.C_LI(rd_rs1, imm) == code


@pytest.mark.parametrize(
    'rd_rs1, imm,  code', [
    (2,      16,   0b0110000100000101),
    (2,      496,  0b0110000101111101),
    (2,      -16,  0b0111000101111101),
    (2,      -512, 0b0111000100000001),
])
def test_c_addi16sp(rd_rs1, imm, code):
    assert asm.C_ADDI16SP(rd_rs1, imm) == code


@pytest.mark.parametrize(
    'rd_rs1, imm, code', [
    (1,      1,   0b0110000010000101),
    (1 ,     31,  0b0110000011111101),
    (1,      -1,  0b0111000011111101),
    (1,      -32, 0b0111000010000001),
    (31,     1 ,  0b0110111110000101),
    (31,     31,  0b0110111111111101),
    (31,     -1,  0b0111111111111101),
    (31,     -32, 0b0111111110000001),
])
def test_c_lui(rd_rs1, imm, code):
    assert asm.C_LUI(rd_rs1, imm) == code


@pytest.mark.parametrize(
    'rd_rs1, imm, code', [
    (8,      1,   0b1000010000000101),
    (8 ,     31,  0b1000010001111101),
    (15,     1 ,  0b1000011110000101),
    (15,     31,  0b1000011111111101),
])
def test_c_srai(rd_rs1, imm, code):
    assert asm.C_SRAI(rd_rs1, imm) == code


@pytest.mark.parametrize(
    'rd_rs1, imm, code', [
    (8,      1,   0b1000100000000101),
    (8 ,     31,  0b1000100001111101),
    (15,     1 ,  0b1000101110000101),
    (15,     31,  0b1000101111111101),
])
def test_c_andi(rd_rs1, imm, code):
    assert asm.C_ANDI(rd_rs1, imm) == code


@pytest.mark.parametrize(
    'rd_rs1, imm, code', [
    (8,      1,   0b1000000000000101),
    (8 ,     31,  0b1000000001111101),
    (15,     1 ,  0b1000001110000101),
    (15,     31,  0b1000001111111101),
])
def test_c_srli(rd_rs1, imm, code):
    assert asm.C_SRLI(rd_rs1, imm) == code


@pytest.mark.parametrize(
    'rd_rs1, rs2, code', [
    (8,      8,   0b1000110000000001),
    (8 ,     15,  0b1000110000011101),
    (15,     8 ,  0b1000111110000001),
    (15,     15,  0b1000111110011101),
])
def test_c_sub(rd_rs1, rs2, code):
    assert asm.C_SUB(rd_rs1, rs2) == code


@pytest.mark.parametrize(
    'rd_rs1, rs2, code', [
    (8,      8,   0b1000110000100001),
    (8 ,     15,  0b1000110000111101),
    (15,     8 ,  0b1000111110100001),
    (15,     15,  0b1000111110111101),
])
def test_c_xor(rd_rs1, rs2, code):
    assert asm.C_XOR(rd_rs1, rs2) == code


@pytest.mark.parametrize(
    'rd_rs1, rs2, code', [
    (8,      8,   0b1000110001000001),
    (8 ,     15,  0b1000110001011101),
    (15,     8 ,  0b1000111111000001),
    (15,     15,  0b1000111111011101),
])
def test_c_or(rd_rs1, rs2, code):
    assert asm.C_OR(rd_rs1, rs2) == code


@pytest.mark.parametrize(
    'rd_rs1, rs2, code', [
    (8,      8,   0b1000110001100001),
    (8 ,     15,  0b1000110001111101),
    (15,     8 ,  0b1000111111100001),
    (15,     15,  0b1000111111111101),
])
def test_c_and(rd_rs1, rs2, code):
    assert asm.C_AND(rd_rs1, rs2) == code


@pytest.mark.parametrize(
    'imm,   code', [
    (0,     0b1010000000000001),
    (2,     0b1010000000001001),
    (4,     0b1010000000010001),
    (8,     0b1010000000100001),
    (16,    0b1010100000000001),
    (32,    0b1010000000000101),
    (64,    0b1010000010000001),
    (128,   0b1010000001000001),
    (256,   0b1010001000000001),
    (512,   0b1010010000000001),
    (1024,  0b1010000100000001),
    (2046,  0b1010111111111101),
    (-2,    0b1011111111111101),
    (-2048, 0b1011000000000001),
])
def test_c_j(imm, code):
    assert asm.C_J(imm) == code


@pytest.mark.parametrize(
    'rs1, imm,  code', [
    (8,   0,    0b1100000000000001),
    (8,   2,    0b1100000000001001),
    (8,   4,    0b1100000000010001),
    (8,   8,    0b1100010000000001),
    (8,   16,   0b1100100000000001),
    (8,   32,   0b1100000000000101),
    (8,   64,   0b1100000000100001),
    (8,   128,  0b1100000001000001),
    (8,   254,  0b1100110001111101),
    (15,  -2,   0b1101111111111101),
    (15,  -256, 0b1101001110000001),
])
def test_c_beqz(rs1, imm, code):
    assert asm.C_BEQZ(rs1, imm) == code


@pytest.mark.parametrize(
    'rs1, imm,  code', [
    (8,   0,    0b1110000000000001),
    (8,   2,    0b1110000000001001),
    (8,   4,    0b1110000000010001),
    (8,   8,    0b1110010000000001),
    (8,   16,   0b1110100000000001),
    (8,   32,   0b1110000000000101),
    (8,   64,   0b1110000000100001),
    (8,   128,  0b1110000001000001),
    (8,   254,  0b1110110001111101),
    (15,  -2,   0b1111111111111101),
    (15,  -256, 0b1111001110000001),
])
def test_c_bnez(rs1, imm, code):
    assert asm.C_BNEZ(rs1, imm) == code


@pytest.mark.parametrize(
    'rd_rs1, imm, code', [
    (1,      1,   0b0000000010000110),
    (1 ,     31,  0b0000000011111110),
    (31,     1 ,  0b0000111110000110),
    (31,     31,  0b0000111111111110),
])
def test_c_slli(rd_rs1, imm, code):
    assert asm.C_SLLI(rd_rs1, imm) == code


@pytest.mark.parametrize(
    'rd, imm, code', [
    (1,  0,   0b0100000010000010),
    (1 , 252, 0b0101000011111110),
    (31, 0 ,  0b0100111110000010),
    (31, 252, 0b0101111111111110),
])
def test_c_lwsp(rd, imm, code):
    assert asm.C_LWSP(rd, imm) == code


@pytest.mark.parametrize(
    'rd_rs1, rs2, code', [
    (1,      0,   0b1000000010000010),
    (1 ,     0,   0b1000000010000010),
    (31,     0 ,  0b1000111110000010),
    (31,     0,   0b1000111110000010),
])
def test_c_jr(rd_rs1, rs2, code):
    assert asm.C_JR(rd_rs1, rs2) == code


@pytest.mark.parametrize(
    'rd_rs1, rs2, code', [
    (1,      1,   0b1000000010000110),
    (1 ,     31,  0b1000000011111110),
    (31,     1,   0b1000111110000110),
    (31,     31,  0b1000111111111110),
])
def test_c_mv(rd_rs1, rs2, code):
    assert asm.C_MV(rd_rs1, rs2) == code


@pytest.mark.parametrize(
    'rd_rs1, rs2, code', [
    (1,      1,   0b1001000010000110),
    (1,      31,  0b1001000011111110),
    (31,     1,   0b1001111110000110),
    (31,     31,  0b1001111111111110),
])
def test_c_add(rd_rs1, rs2, code):
    assert asm.C_ADD(rd_rs1, rs2) == code


@pytest.mark.parametrize(
    'rs2, imm, code', [
    (0,   0,   0b1100000000000010),
    (0,   4,   0b1100001000000010),
    (0,   8,   0b1100010000000010),
    (0,   16,  0b1100100000000010),
    (0,   32,  0b1101000000000010),
    (0,   64,  0b1100000010000010),
    (0,   128, 0b1100000100000010),
    (0,   252, 0b1101111110000010),
    (31,  0,   0b1100000001111110),
])
def test_c_swsp(rs2, imm, code):
    assert asm.C_SWSP(rs2, imm) == code


def test_read_assembly():
    source = 'addi t0 zero 1\naddi t1, zero, 2\naddi t2, zero, 3'
    lines = asm.read_lines(source)
    assert len(lines) == 3
    assert lines[1].contents.strip() == 'addi t1, zero, 2'
    for i, line in enumerate(lines, start=1):
        assert line.file == '<string>'
        assert line.number == i


def test_lex_assembly():
    line = r'addi t0 zero 1'
    tokens = asm.lex_tokens(line)
    assert len(tokens) == 4
    assert tokens.tokens == ['addi', 't0', 'zero', '1']


def test_parse_assembly():
    line = r'addi t0 zero 1'
    tokens = asm.lex_tokens(line)
    item = asm.parse_item(tokens)
    assert isinstance(item, asm.ITypeInstruction)
    assert item.name == 'addi'
    assert item.rd == 't0'
    assert item.rs1 == 'zero'


def test_assembler_basic():
    source = r"""
    addi t0 zero 1
    addi t1, zero, 2
    addi t2, zero, 3
    """
    binary = asm.assemble(source)
    target = b''.join(struct.pack('<I', inst) for inst in [
        # can use nums OR names for registers
        asm.ADDI(5, 0, 1),
        asm.ADDI('t1', 'zero', 2),
        asm.ADDI('t2', 'zero', 3),
    ])
    assert binary == target


def test_assembler_basic_uppercase():
    source = r"""
    ADDI t0 zero 1
    ADDI t1, zero, 2
    ADDI t2, zero, 3
    """
    binary = asm.assemble(source)
    target = b''.join(struct.pack('<I', inst) for inst in [
        # can use nums OR names for registers
        asm.ADDI(5, 0, 1),
        asm.ADDI('t1', 'zero', 2),
        asm.ADDI('t2', 'zero', 3),
    ])
    assert binary == target


@pytest.mark.parametrize(
    'pseudo,             transformed', [

    ('nop',              'addi x0 x0 0'),
    ('li t0 0x20000000', 'lui t0 %hi(0x20000000)\n addi t0 t0 %lo(0x20000000)'),
    ('mv t0 t1',         'addi t0 t1 0'),
    ('not t0 t1',        'xori t0 t1 -1'),
    ('neg t0 t1',        'sub t0 x0 t1'),
    ('seqz t0 t1',       'sltiu t0 t1 1'),
    ('snez t0 t1',       'sltu t0 x0 t1'),
    ('sltz t0 t1',       'slt t0 t1 x0'),
    ('sgtz t0 t1',       'slt t0 x0 t1'),

    ('beqz t0 16',       'beq t0 x0 16'),
    ('bnez t0 16',       'bne t0 x0 16'),
    ('blez t0 16',       'bge x0 t0 16'),
    ('bgez t0 16',       'bge t0 x0 16'),
    ('bltz t0 16',       'blt t0 x0 16'),
    ('bgtz t0 16',       'blt x0 t0 16'),

    ('bgt t0 t1 16',     'blt t1 t0 16'),
    ('ble t0 t1 16',     'bge t1 t0 16'),
    ('bgtu t0 t1 16',    'bltu t1 t0 16'),
    ('bleu t0 t1 16',    'bgeu t1 t0 16'),

    ('j 16',             'jal x0 16'),
    ('jal 16',           'jal x1 16'),
    ('jr t0',            'jalr x0 0(t0)'),
    ('jalr t0',          'jalr x1 0(t0)'),
    ('ret',              'jalr x0 0(x1)'),
    ('call 0x20000000',  'auipc x1 %hi(0x20000000)\n jalr x1 x1 %lo(0x20000000)'),
    ('tail 0x20000000',  'auipc x6 %hi(0x20000000)\n jalr x0 x6 %lo(0x20000000)'),

    ('fence',            'fence 0b1111 0b1111'),
])
def test_pseudo_instructions(pseudo, transformed):
    pseudo_bin = asm.assemble(pseudo)
    transformed_bin = asm.assemble(transformed)
    assert pseudo_bin == transformed_bin


@pytest.mark.parametrize(
    'shorthand,        transformed', [
    ('db  0',          'pack <B 0'),
    ('db  -1',         'pack <b -1'),
    ('db  0xff',       'pack <B 0xff'),
    ('db -128',        'pack <b -128'),
    ('dh  0',          'pack <H 0'),
    ('dh  0xffff',     'pack <H 0xffff'),
    ('dh -0x7fff',     'pack <h -0x7fff'),
    ('dw  0',          'pack <I 0'),
    ('dw  0xffffffff', 'pack <I 0xffffffff'),
    ('dw -0x7fffffff', 'pack <i -0x7fffffff'),
])
def test_shorthand_packs(shorthand, transformed):
    shorthand_bin = asm.assemble(shorthand)
    transformed_bin = asm.assemble(transformed)
    assert shorthand_bin == transformed_bin


def test_alternate_offset_syntax():
    source = r"""
    jalr x0, x1, 0
    jalr x0, 0(x1)
    lw t3, sp, 8
    lw t3, 8(sp)
    sb a0, t3, 0
    sb t3, 0(a0)
    """
    binary = asm.assemble(source)
    target = b''.join(struct.pack('<I', inst) for inst in [
        asm.JALR('x0', 'x1', 0),
        asm.JALR('x0', 'x1', 0),
        asm.LW('t3', 'sp', 8),
        asm.LW('t3', 'sp', 8),
        asm.SB('a0', 't3', 0),
        asm.SB('a0', 't3', 0),
    ])
    assert binary == target


def test_assembler_constants():
    source = r"""
    FOO = 42
    BAR = FOO * 2
    BAZ = BAR >> 1 & 0b11111
    W = 's0'
    IP = gp
    addi zero zero BAR
    addi W IP BAZ
    """
    binary = asm.assemble(source)
    target = b''.join(struct.pack('<I', inst) for inst in [
        asm.ADDI(0, 0, 84),
        asm.ADDI('s0', 'gp', 10),
    ])
    assert binary == target


def test_assembler_labels_and_jumps():
    source = r"""
    start:
        addi t0 zero 42
        jal zero end
    middle:
        beq t0 zero main
        addi t0 t0 -1
    end:
        jal zero middle
    main:
        addi zero zero 0
    """
    binary = asm.assemble(source)
    target = b''.join(struct.pack('<I', inst) for inst in [
        asm.ADDI('t0', 'zero', 42),
        asm.JAL('zero', 12),
        asm.BEQ('t0', 'zero', 12),
        asm.ADDI('t0', 't0', -1),
        asm.JAL('zero', -8),
        asm.ADDI(0, 0, 0),
    ])
    assert binary == target


def test_assembler_string():
    source = r"""
    string hello
    string "world"
    string "hello world"
    string hello  ##  world
    string hello\nworld
    string   hello\\nworld
    """
    binary = asm.assemble(source)
    target = b'hello"world""hello world"hello  ##  worldhello\nworld  hello\\nworld'
    assert binary == target


def test_assembler_bytes():
    source = r"""
    bytes 1 2 0x03 0b100 5 0x06 0b111 8
    """
    binary = asm.assemble(source)
    target = b'\x01\x02\x03\x04\x05\x06\x07\x08'
    assert binary == target


def test_assembler_pack():
    source = r"""
    ADDR = 0x20000000
    pack <B 0
    pack <B 255
    pack <I ADDR
    pack <f 3.14159
    """
    binary = asm.assemble(source)
    target = b''.join([
        struct.pack('<B', 0),
        struct.pack('<B', 255),
        struct.pack('<I', 0x20000000),
        struct.pack('<f', 3.14159),
    ])
    assert binary == target


def test_assembler_align():
    source = r"""
    addi zero zero 0
    pack <B 42
    align 4
    addi zero zero 0
    """
    binary = asm.assemble(source)
    target = b''.join([
        struct.pack('<I', asm.ADDI(0, 0, 0)),
        b'\x2a\x00\x00\x00',
        struct.pack('<I', asm.ADDI(0, 0, 0)),
    ])
    assert binary == target


def test_assembler_modifiers():
    source = r"""
    ADDR = 0x20000000

    addi zero zero 0
    addi zero zero 0
    addi zero zero 0

    main:
        # without nestable exprs under hi / lo
        lui t0 %hi ADDR
        addi t0 t0 %lo(ADDR)
        addi t0 t0 main
    
        # with nestable exprs under hi / lo
        lui t0 %hi %position main ADDR
        addi t0 t0 %lo(%position(main, ADDR))
    """
    binary = asm.assemble(source)
    target = b''.join(struct.pack('<I', inst) for inst in [
        asm.ADDI(0, 0, 0),
        asm.ADDI(0, 0, 0),
        asm.ADDI(0, 0, 0),
        asm.LUI('t0', asm.relocate_hi(0x20000000)),
        asm.ADDI('t0', 't0', asm.relocate_lo(0x20000000)),
        asm.ADDI('t0', 't0', 12),
        asm.LUI('t0', asm.relocate_hi(0x20000000 + 12)),
        asm.ADDI('t0', 't0', asm.relocate_lo(0x20000000 + 12)),
    ])
    assert binary == target


def test_assembler_atomics():
    source = r"""
    lr.w zero zero
    sc.w zero zero zero 0 0
    sc.w zero zero zero 1 0
    sc.w zero zero zero 0 1
    sc.w zero zero zero 1 1
    amomaxu.w t0 t1 t2
    """
    binary = asm.assemble(source)
    target = b''.join(struct.pack('<I', inst) for inst in [
        asm.LR_W(0, 0),
        asm.SC_W(0, 0, 0, aq=0, rl=0),
        asm.SC_W(0, 0, 0, aq=1, rl=0),
        asm.SC_W(0, 0, 0, aq=0, rl=1),
        asm.SC_W(0, 0, 0, aq=1, rl=1),
        asm.AMOMAXU_W('t0', 't1', 't2'),
    ])
    assert binary == target


def test_assembler_hex_register():
    source = r"""
    slli a4,a4,0xa
    """
    binary = asm.assemble(source)
    target = b''.join(struct.pack('<I', inst) for inst in [
        asm.SLLI('a4', 'a4', 10),
    ])
    assert binary == target
